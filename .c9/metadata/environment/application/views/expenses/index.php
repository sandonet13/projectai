{"filter":false,"title":"index.php","tooltip":"/application/views/expenses/index.php","undoManager":{"mark":34,"position":34,"stack":[[{"start":{"row":0,"column":0},"end":{"row":79,"column":0},"action":"remove","lines":["<div id=\"page-content\" class=\"clearfix p20\">","    <div class=\"panel clearfix\">","        <ul id=\"expenses-tabs\" data-toggle=\"ajax-tab\" class=\"nav nav-tabs bg-white title\" role=\"tablist\">","            <li class=\"title-tab\"><h4 class=\"pl15 pt10 pr15\"><?php echo lang(\"expenses\"); ?></h4></li>","            <li><a id=\"monthly-expenses-button\"  role=\"presentation\" class=\"active\" href=\"javascript:;\" data-target=\"#monthly-expenses\"><?php echo lang(\"monthly\"); ?></a></li>","            <li><a role=\"presentation\" href=\"<?php echo_uri(\"expenses/yearly/\"); ?>\" data-target=\"#yearly-expenses\"><?php echo lang('yearly'); ?></a></li>","            <li><a role=\"presentation\" href=\"<?php echo_uri(\"expenses/custom/\"); ?>\" data-target=\"#custom-expenses\"><?php echo lang('custom'); ?></a></li>","            <li><a role=\"presentation\" href=\"<?php echo_uri(\"expenses/recurring/\"); ?>\" data-target=\"#recurring-expenses\"><?php echo lang('recurring'); ?></a></li>","            <li><a role=\"presentation\" href=\"<?php echo_uri(\"expenses/yearly_chart/\"); ?>\" data-target=\"#yearly-chart\"><?php echo lang('chart'); ?></a></li>","            <div class=\"tab-title clearfix no-border\">","                <div class=\"title-button-group\">","                    <?php echo modal_anchor(get_uri(\"expenses/modal_form\"), \"<i class='fa fa-plus-circle'></i> \" . lang('add_expense'), array(\"class\" => \"btn btn-default mb0\", \"title\" => lang('add_expense'))); ?>","                </div>","            </div>","        </ul>","","        <div class=\"tab-content\">","            <div role=\"tabpanel\" class=\"tab-pane fade\" id=\"monthly-expenses\">","                <div class=\"table-responsive\">","                    <table id=\"monthly-expense-table\" class=\"display\" cellspacing=\"0\" width=\"100%\">","                    </table>","                </div>","            </div>","            <div role=\"tabpanel\" class=\"tab-pane fade\" id=\"yearly-expenses\"></div>","            <div role=\"tabpanel\" class=\"tab-pane fade\" id=\"custom-expenses\"></div>","            <div role=\"tabpanel\" class=\"tab-pane fade\" id=\"recurring-expenses\"></div>","            <div role=\"tabpanel\" class=\"tab-pane fade\" id=\"yearly-chart\"></div>","        </div>","    </div>","</div>","","<script type=\"text/javascript\">","    loadExpensesTable = function (selector, dateRange) {","        var customDatePicker = \"\", recurring = \"0\";","        if (dateRange === \"custom\" || dateRange === \"recurring\") {","            customDatePicker = [{startDate: {name: \"start_date\", value: moment().format(\"YYYY-MM-DD\")}, endDate: {name: \"end_date\", value: moment().format(\"YYYY-MM-DD\")}, showClearButton: true}];","            ","            if(dateRange === \"recurring\"){","                recurring = \"1\";","            }","            ","            dateRange = \"\";","        }        ","","        $(selector).appTable({","            source: '<?php echo_uri(\"expenses/list_data\") ?>/' + recurring,","            dateRangeType: dateRange,","            filterDropdown: [","                {name: \"category_id\", class: \"w200\", options: <?php echo $categories_dropdown; ?>},","                {name: \"user_id\", class: \"w200\", options: <?php echo $members_dropdown; ?>},","                <?php if ($projects_dropdown) { ?>","                    {name: \"project_id\", class: \"w200\", options: <?php echo $projects_dropdown; ?>}","                <?php } ?>","            ],","            order: [[0, \"asc\"]],","            rangeDatepicker: customDatePicker,","            columns: [","                {visible: false, searchable: false},","                {title: '<?php echo lang(\"date\") ?>', \"iDataSort\": 0},","                {title: '<?php echo lang(\"category\") ?>'},","                {title: '<?php echo lang(\"title\") ?>'},","                {title: '<?php echo lang(\"description\") ?>'},","                {title: '<?php echo lang(\"files\") ?>'},","                {title: '<?php echo lang(\"amount\") ?>', \"class\": \"text-right\"},","                {title: '<?php echo lang(\"tax\") ?>', \"class\": \"text-right\"},","                {title: '<?php echo lang(\"total\") ?>', \"class\": \"text-right\"}","<?php echo $custom_field_headers; ?>,","                {title: '<i class=\"fa fa-bars\"></i>', \"class\": \"text-center option w100\"}","            ],","            printColumns: [1, 2, 3, 4, 6, 7, 8, 9],","            xlsColumns: [1, 2, 3, 4, 6, 7, 8, 9],","            summation: [{column: 6, dataType: 'currency'}, {column: 7, dataType: 'currency'}, {column: 8, dataType: 'currency'}]","        });","    };","","    $(document).ready(function () {","        loadExpensesTable(\"#monthly-expense-table\", \"monthly\");","    });","</script>",""],"id":2},{"start":{"row":0,"column":0},"end":{"row":558,"column":54},"action":"insert","lines":["<?php","","if (!defined('BASEPATH'))","    exit('No direct script access allowed');","","class Expenses extends MY_Controller {","","    function __construct() {","        parent::__construct();","","        $this->init_permission_checker(\"expense\");","","        $this->access_only_allowed_members();","    }","","    //load the expenses list view","    function index() {","        $this->check_module_availability(\"module_expense\");","","        $view_data[\"custom_field_headers\"] = $this->Custom_fields_model->get_custom_field_headers_for_table(\"expenses\", $this->login_user->is_admin, $this->login_user->user_type);","","        $view_data['categories_dropdown'] = $this->_get_categories_dropdown();","        $view_data['members_dropdown'] = $this->_get_team_members_dropdown();","        $view_data[\"projects_dropdown\"] = $this->_get_projects_dropdown_for_income_and_epxenses(\"expenses\");","","        $this->template->rander(\"expenses/index\", $view_data);","    }","","    //get categories dropdown","    private function _get_categories_dropdown() {","        $categories = $this->Expense_categories_model->get_all_where(array(\"deleted\" => 0), 0, 0, \"title\")->result();","","        $categories_dropdown = array(array(\"id\" => \"\", \"text\" => \"- \" . lang(\"category\") . \" -\"));","        foreach ($categories as $category) {","            $categories_dropdown[] = array(\"id\" => $category->id, \"text\" => $category->title);","        }","","        return json_encode($categories_dropdown);","    }","","    //get team members dropdown","    private function _get_team_members_dropdown() {","        $team_members = $this->Users_model->get_all_where(array(\"deleted\" => 0, \"user_type\" => \"staff\"), 0, 0, \"first_name\")->result();","","        $members_dropdown = array(array(\"id\" => \"\", \"text\" => \"- \" . lang(\"member\") . \" -\"));","        foreach ($team_members as $team_member) {","            $members_dropdown[] = array(\"id\" => $team_member->id, \"text\" => $team_member->first_name . \" \" . $team_member->last_name);","        }","","        return json_encode($members_dropdown);","    }","","    //load the expenses list yearly view","    function yearly() {","        $this->load->view(\"expenses/yearly_expenses\");","    }","","    //load custom expenses list","    function custom() {","        $this->load->view(\"expenses/custom_expenses\");","    }","","    //load the recurring view of expense list ","    function recurring() {","        $this->load->view(\"expenses/recurring_expenses_list\");","    }","","    //load the add/edit expense form","    function modal_form() {","        validate_submitted_data(array(","            \"id\" => \"numeric\"","        ));","","        $client_id = $this->input->post('client_id');","","        $model_info = $this->Expenses_model->get_one($this->input->post('id'));","        $view_data['categories_dropdown'] = $this->Expense_categories_model->get_dropdown_list(array(\"title\"));","","        $team_members = $this->Users_model->get_all_where(array(\"deleted\" => 0, \"user_type\" => \"staff\"))->result();","        $members_dropdown = array();","","        foreach ($team_members as $team_member) {","            $members_dropdown[$team_member->id] = $team_member->first_name . \" \" . $team_member->last_name;","        }","","        $view_data['members_dropdown'] = array(\"0\" => \"-\") + $members_dropdown;","        $view_data['clients_dropdown'] = array(\"\" => \"-\") + $this->Clients_model->get_dropdown_list(array(\"company_name\"), \"id\", array(\"is_lead\" => 0));","        $view_data['projects_dropdown'] = array(\"0\" => \"-\") + $this->Projects_model->get_dropdown_list(array(\"title\"));","        $view_data['taxes_dropdown'] = array(\"\" => \"-\") + $this->Taxes_model->get_dropdown_list(array(\"title\"));","","        $model_info->project_id = $model_info->project_id ? $model_info->project_id : $this->input->post('project_id');","        $model_info->user_id = $model_info->user_id ? $model_info->user_id : $this->input->post('user_id');","","        $view_data['model_info'] = $model_info;","        $view_data['client_id'] = $client_id;","","        $view_data['can_access_expenses'] = $this->can_access_expenses();","        $view_data['can_access_clients'] = $this->can_access_clients();","","        $view_data[\"custom_fields\"] = $this->Custom_fields_model->get_combined_details(\"expenses\", $view_data['model_info']->id, $this->login_user->is_admin, $this->login_user->user_type)->result();","        $this->load->view('expenses/modal_form', $view_data);","    }","","    //save an expense","    function save() {","        validate_submitted_data(array(","            \"id\" => \"numeric\",","            \"expense_date\" => \"required\",","            \"category_id\" => \"required\",","            \"amount\" => \"required\"","        ));","","        $id = $this->input->post('id');","","        $target_path = get_setting(\"timeline_file_path\");","        $files_data = move_files_from_temp_dir_to_permanent_dir($target_path, \"expense\");","        $new_files = unserialize($files_data);","","        $recurring = $this->input->post('recurring') ? 1 : 0;","        $expense_date = $this->input->post('expense_date');","        $repeat_every = $this->input->post('repeat_every');","        $repeat_type = $this->input->post('repeat_type');","        $no_of_cycles = $this->input->post('no_of_cycles');","","        $data = array(","            \"expense_date\" => $expense_date,","            \"title\" => $this->input->post('title'),","            \"description\" => $this->input->post('description'),","            \"category_id\" => $this->input->post('category_id'),","            \"amount\" => unformat_currency($this->input->post('amount')),","            \"client_id\" => $this->input->post('expense_client_id')? $this->input->post('expense_client_id'): 0,","            \"project_id\" => $this->input->post('expense_project_id'),","            \"user_id\" => $this->input->post('expense_user_id'),","            \"tax_id\" => $this->input->post('tax_id') ? $this->input->post('tax_id') : 0,","            \"tax_id2\" => $this->input->post('tax_id2') ? $this->input->post('tax_id2') : 0,","            \"recurring\" => $recurring,","            \"repeat_every\" => $repeat_every ? $repeat_every : 0,","            \"repeat_type\" => $repeat_type ? $repeat_type : NULL,","            \"no_of_cycles\" => $no_of_cycles ? $no_of_cycles : 0,","        );","","        $expense_info = $this->Expenses_model->get_one($id);","","        //is editing? update the files if required","        if ($id) {","            $timeline_file_path = get_setting(\"timeline_file_path\");","            $new_files = update_saved_files($timeline_file_path, $expense_info->files, $new_files);","        }","","        $data[\"files\"] = serialize($new_files);","","        if ($recurring) {","            //set next recurring date for recurring expenses","","            if ($id) {","                //update","                if ($this->input->post('next_recurring_date')) { //submitted any recurring date? set it.","                    $data['next_recurring_date'] = $this->input->post('next_recurring_date');","                } else {","                    //re-calculate the next recurring date, if any recurring fields has changed.","                    if ($expense_info->recurring != $data['recurring'] || $expense_info->repeat_every != $data['repeat_every'] || $expense_info->repeat_type != $data['repeat_type'] || $expense_info->expense_date != $data['expense_date']) {","                        $data['next_recurring_date'] = add_period_to_date($expense_date, $repeat_every, $repeat_type);","                    }","                }","            } else {","                //insert new","                $data['next_recurring_date'] = add_period_to_date($expense_date, $repeat_every, $repeat_type);","            }","","","            //recurring date must have to set a future date","            if (get_array_value($data, \"next_recurring_date\") && get_today_date() >= $data['next_recurring_date']) {","                echo json_encode(array(\"success\" => false, 'message' => lang('past_recurring_date_error_message_title'), 'next_recurring_date_error' => lang('past_recurring_date_error_message'), \"next_recurring_date_value\" => $data['next_recurring_date']));","                return false;","            }","        }","","        $save_id = $this->Expenses_model->save($data, $id);","        if ($save_id) {","            save_custom_fields(\"expenses\", $save_id, $this->login_user->is_admin, $this->login_user->user_type);","","            echo json_encode(array(\"success\" => true, \"data\" => $this->_row_data($save_id), 'id' => $save_id, 'message' => lang('record_saved')));","        } else {","            echo json_encode(array(\"success\" => false, 'message' => lang('error_occurred')));","        }","    }","","    //delete/undo an expense","    function delete() {","        validate_submitted_data(array(","            \"id\" => \"required|numeric\"","        ));","","        $id = $this->input->post('id');","        $expense_info = $this->Expenses_model->get_one($id);","","","        if ($this->Expenses_model->delete($id)) {","            //delete the files","            $file_path = get_setting(\"timeline_file_path\");","            if ($expense_info->files) {","                $files = unserialize($expense_info->files);","","                foreach ($files as $file) {","                    delete_app_files($file_path, array($file));","                }","            }","","            echo json_encode(array(\"success\" => true, 'message' => lang('record_deleted')));","        } else {","            echo json_encode(array(\"success\" => false, 'message' => lang('record_cannot_be_deleted')));","        }","    }","","    //get the expnese list data","    function list_data($recurring = false) {","        $start_date = $this->input->post('start_date');","        $end_date = $this->input->post('end_date');","        $category_id = $this->input->post('category_id');","        $project_id = $this->input->post('project_id');","        $user_id = $this->input->post('user_id');","","        $custom_fields = $this->Custom_fields_model->get_available_fields_for_table(\"expenses\", $this->login_user->is_admin, $this->login_user->user_type);","","        $options = array(\"start_date\" => $start_date, \"end_date\" => $end_date, \"category_id\" => $category_id, \"project_id\" => $project_id, \"user_id\" => $user_id, \"custom_fields\" => $custom_fields, \"recurring\" => $recurring);","        $list_data = $this->Expenses_model->get_details($options)->result();","","        $result = array();","        foreach ($list_data as $data) {","            $result[] = $this->_make_row($data, $custom_fields);","        }","        echo json_encode(array(\"data\" => $result));","    }","","    //get a row of expnese list","    private function _row_data($id) {","        $custom_fields = $this->Custom_fields_model->get_available_fields_for_table(\"expenses\", $this->login_user->is_admin, $this->login_user->user_type);","        $options = array(\"id\" => $id, \"custom_fields\" => $custom_fields);","        $data = $this->Expenses_model->get_details($options)->row();","        return $this->_make_row($data, $custom_fields);","    }","","    //prepare a row of expnese list","    private function _make_row($data, $custom_fields) {","","        $description = $data->description;","        if ($data->linked_client_name) {","            if ($description) {","                $description .= \"<br />\";","            }","            $description .= lang(\"client\") . \": \" . $data->linked_client_name;","        }","","        if ($data->project_title) {","            if ($description) {","                $description .= \"<br /> \";","            }","            $description .= lang(\"project\") . \": \" . $data->project_title;","        }","","        if ($data->linked_user_name) {","            if ($description) {","                $description .= \"<br /> \";","            }","            $description .= lang(\"team_member\") . \": \" . $data->linked_user_name;","        }","","        if ($data->recurring) {","            //show recurring information","            $recurring_stopped = false;","            $recurring_cycle_class = \"\";","            if ($data->no_of_cycles_completed > 0 && $data->no_of_cycles_completed == $data->no_of_cycles) {","                $recurring_cycle_class = \"text-danger\";","                $recurring_stopped = true;","            }","","            $cycles = $data->no_of_cycles_completed . \"/\" . $data->no_of_cycles;","            if (!$data->no_of_cycles) { //if not no of cycles, so it's infinity","                $cycles = $data->no_of_cycles_completed . \"/&#8734;\";","            }","","            if ($description) {","                $description .= \"<br /> \";","            }","","            $description .= lang(\"repeat_every\") . \": \" . $data->repeat_every . \" \" . lang(\"interval_\" . $data->repeat_type);","            $description .= \"<br /> \";","            $description .= \"<span class='$recurring_cycle_class'>\" . lang(\"cycles\") . \": \" . $cycles . \"</span>\";","","            if (!$recurring_stopped && (int) $data->next_recurring_date) {","                $description .= \"<br /> \";","                $description .= lang(\"next_recurring_date\") . \": \" . format_to_date($data->next_recurring_date, false);","            }","        }","","        if ($data->recurring_expense_id) {","            if ($description) {","                $description .= \"<br /> \";","            }","            $description .= modal_anchor(get_uri(\"expenses/expense_details\"), lang(\"original_expense\"), array(\"title\" => lang(\"expense_details\"), \"data-post-id\" => $data->recurring_expense_id));","        }","","        $files_link = \"\";","        if ($data->files) {","            $files = unserialize($data->files);","            if (count($files)) {","                foreach ($files as $key => $value) {","                    $file_name = get_array_value($value, \"file_name\");","                    $link = \" fa fa-\" . get_file_icon(strtolower(pathinfo($file_name, PATHINFO_EXTENSION)));","                    $files_link .= js_anchor(\" \", array('title' => \"\", \"data-toggle\" => \"app-modal\", \"data-sidebar\" => \"0\", \"class\" => \"pull-left font-22 mr10 $link\", \"title\" => remove_file_prefix($file_name), \"data-url\" => get_uri(\"expenses/file_preview/\" . $data->id . \"/\" . $key)));","                }","            }","        }","","        $tax = 0;","        $tax2 = 0;","        if ($data->tax_percentage) {","            $tax = $data->amount * ($data->tax_percentage / 100);","        }","        if ($data->tax_percentage2) {","            $tax2 = $data->amount * ($data->tax_percentage2 / 100);","        }","","        $row_data = array(","            $data->expense_date,","            modal_anchor(get_uri(\"expenses/expense_details\"), format_to_date($data->expense_date, false), array(\"title\" => lang(\"expense_details\"), \"data-post-id\" => $data->id)),","            $data->category_title,","            $data->title,","            $description,","            $files_link,","            to_currency($data->amount),","            to_currency($tax),","            to_currency($tax2),","            to_currency($data->amount + $tax + $tax2)","        );","","        foreach ($custom_fields as $field) {","            $cf_id = \"cfv_\" . $field->id;","            $row_data[] = $this->load->view(\"custom_fields/output_\" . $field->field_type, array(\"value\" => $data->$cf_id), true);","        }","","        $row_data[] = modal_anchor(get_uri(\"expenses/modal_form\"), \"<i class='fa fa-pencil'></i>\", array(\"class\" => \"edit\", \"title\" => lang('edit_expense'), \"data-post-id\" => $data->id))","                . js_anchor(\"<i class='fa fa-times fa-fw'></i>\", array('title' => lang('delete_expense'), \"class\" => \"delete\", \"data-id\" => $data->id, \"data-action-url\" => get_uri(\"expenses/delete\"), \"data-action\" => \"delete-confirmation\"));","","        return $row_data;","    }","","    function file_preview($id = \"\", $key = \"\") {","        if ($id) {","            $expense_info = $this->Expenses_model->get_one($id);","            $files = unserialize($expense_info->files);","            $file = get_array_value($files, $key);","","            $file_name = get_array_value($file, \"file_name\");","            $file_id = get_array_value($file, \"file_id\");","            $service_type = get_array_value($file, \"service_type\");","","            $view_data[\"file_url\"] = get_source_url_of_file($file, get_setting(\"timeline_file_path\"));","            $view_data[\"is_image_file\"] = is_image_file($file_name);","            $view_data[\"is_google_preview_available\"] = is_google_preview_available($file_name);","            $view_data[\"is_viewable_video_file\"] = is_viewable_video_file($file_name);","            $view_data[\"is_google_drive_file\"] = ($file_id && $service_type == \"google\") ? true : false;","","            $this->load->view(\"expenses/file_preview\", $view_data);","        } else {","            show_404();","        }","    }","","    /* upload a file */","","    function upload_file() {","        upload_file_to_temp();","    }","","    /* check valid file for ticket */","","    function validate_expense_file() {","        return validate_post_file($this->input->post(\"file_name\"));","    }","","    //load the expenses yearly chart view","    function yearly_chart() {","        $this->load->view(\"expenses/yearly_chart\");","    }","","    function yearly_chart_data() {","","        $months = array(\"january\", \"february\", \"march\", \"april\", \"may\", \"june\", \"july\", \"august\", \"september\", \"october\", \"november\", \"december\");","        $result = array();","","        $year = $this->input->post(\"year\");","        if ($year) {","            $expenses = $this->Expenses_model->get_yearly_expenses_chart($year);","            $values = array();","            foreach ($expenses as $value) {","                $values[$value->month - 1] = $value->total; //in array the month january(1) = index(0)","            }","","            foreach ($months as $key => $month) {","                $value = get_array_value($values, $key);","                $result[] = array(lang(\"short_\" . $month), $value ? $value : 0);","            }","","            echo json_encode(array(\"data\" => $result));","        }","    }","","    function income_vs_expenses() {","        $view_data[\"projects_dropdown\"] = $this->_get_projects_dropdown_for_income_and_epxenses();","        $this->template->rander(\"expenses/income_vs_expenses_chart\", $view_data);","    }","","    function income_vs_expenses_chart_data() {","","        $year = $this->input->post(\"year\");","        $project_id = $this->input->post(\"project_id\");","","        if ($year) {","            $expenses_data = $this->Expenses_model->get_yearly_expenses_chart($year, $project_id);","            $payments_data = $this->Invoice_payments_model->get_yearly_payments_chart($year, \"\", $project_id);","","            $payments = array();","            $payments_array = array();","","            $expenses = array();","            $expenses_array = array();","","            for ($i = 1; $i <= 12; $i++) {","                $payments[$i] = 0;","                $expenses[$i] = 0;","            }","","            foreach ($payments_data as $payment) {","                $payments[$payment->month] = $payment->total;","            }","            foreach ($expenses_data as $expense) {","                $expenses[$expense->month] = $expense->total;","            }","","            foreach ($payments as $key => $payment) {","                $payments_array[] = array($key, $payment);","            }","","            foreach ($expenses as $key => $expense) {","                $expenses_array[] = array($key, $expense);","            }","","            echo json_encode(array(\"income\" => $payments_array, \"expenses\" => $expenses_array));","        }","    }","","    function income_vs_expenses_summary() {","        $view_data[\"projects_dropdown\"] = $this->_get_projects_dropdown_for_income_and_epxenses();","        $this->load->view(\"expenses/income_vs_expenses_summary\", $view_data);","    }","","    function income_vs_expenses_summary_list_data() {","","        $year = explode(\"-\", $this->input->post(\"start_date\"));","        $project_id = $this->input->post(\"project_id\");","","        if ($year) {","            $expenses_data = $this->Expenses_model->get_yearly_expenses_chart($year[0], $project_id);","            $payments_data = $this->Invoice_payments_model->get_yearly_payments_chart($year[0], \"\", $project_id);","","            $payments = array();","            $expenses = array();","","            for ($i = 1; $i <= 12; $i++) {","                $payments[$i] = 0;","                $expenses[$i] = 0;","            }","","            foreach ($payments_data as $payment) {","                $payments[$payment->month] = $payment->total;","            }","            foreach ($expenses_data as $expense) {","                $expenses[$expense->month] = $expense->total;","            }","","            //get the list of summary","            $result = array();","            for ($i = 1; $i <= 12; $i++) {","                $result[] = $this->_row_data_of_summary($i, $payments[$i], $expenses[$i]);","            }","","            echo json_encode(array(\"data\" => $result));","        }","    }","","    //get the row of summary","    private function _row_data_of_summary($month_index, $payments, $expenses) {","        //get the month name","        $month_array = array(\" \", \"january\", \"february\", \"march\", \"april\", \"may\", \"june\", \"july\", \"august\", \"september\", \"october\", \"november\", \"december\");","","        $month = get_array_value($month_array, $month_index);","","        $month_name = lang($month);","        $profit = $payments - $expenses;","","        return array(","            $month_index,","            $month_name,","            to_currency($payments),","            to_currency($expenses),","            to_currency($profit)","        );","    }","","    /* list of expense of a specific client, prepared for datatable  */","","    function expense_list_data_of_client($client_id) {","        $this->access_only_team_members();","","        $custom_fields = $this->Custom_fields_model->get_available_fields_for_table(\"expenses\", $this->login_user->is_admin, $this->login_user->user_type);","","        $options = array(\"client_id\" => $client_id);","","        $list_data = $this->Expenses_model->get_details($options)->result();","        $result = array();","        foreach ($list_data as $data) {","            $result[] = $this->_make_row($data, $custom_fields);","        }","        echo json_encode(array(\"data\" => $result));","    }","","    private function can_access_clients() {","        $permissions = $this->login_user->permissions;","","        if (get_array_value($permissions, \"client\")) {","            return true;","        } else {","            return false;","        }","    }","","    function expense_details() {","        validate_submitted_data(array(","            \"id\" => \"required|numeric\"","        ));","","        $expense_id = $this->input->post('id');","        $options = array(\"id\" => $expense_id);","        $info = $this->Expenses_model->get_details($options)->row();","        if (!$info) {","            show_404();","        }","","        $view_data[\"expense_info\"] = $info;","        $view_data['custom_fields_list'] = $this->Custom_fields_model->get_combined_details(\"expenses\", $expense_id, $this->login_user->is_admin, $this->login_user->user_type)->result();","","        $this->load->view(\"expenses/expense_details\", $view_data);","    }","","}","","/* End of file expenses.php */","/* Location: ./application/controllers/expenses.php */"]}],[{"start":{"row":0,"column":0},"end":{"row":558,"column":54},"action":"remove","lines":["<?php","","if (!defined('BASEPATH'))","    exit('No direct script access allowed');","","class Expenses extends MY_Controller {","","    function __construct() {","        parent::__construct();","","        $this->init_permission_checker(\"expense\");","","        $this->access_only_allowed_members();","    }","","    //load the expenses list view","    function index() {","        $this->check_module_availability(\"module_expense\");","","        $view_data[\"custom_field_headers\"] = $this->Custom_fields_model->get_custom_field_headers_for_table(\"expenses\", $this->login_user->is_admin, $this->login_user->user_type);","","        $view_data['categories_dropdown'] = $this->_get_categories_dropdown();","        $view_data['members_dropdown'] = $this->_get_team_members_dropdown();","        $view_data[\"projects_dropdown\"] = $this->_get_projects_dropdown_for_income_and_epxenses(\"expenses\");","","        $this->template->rander(\"expenses/index\", $view_data);","    }","","    //get categories dropdown","    private function _get_categories_dropdown() {","        $categories = $this->Expense_categories_model->get_all_where(array(\"deleted\" => 0), 0, 0, \"title\")->result();","","        $categories_dropdown = array(array(\"id\" => \"\", \"text\" => \"- \" . lang(\"category\") . \" -\"));","        foreach ($categories as $category) {","            $categories_dropdown[] = array(\"id\" => $category->id, \"text\" => $category->title);","        }","","        return json_encode($categories_dropdown);","    }","","    //get team members dropdown","    private function _get_team_members_dropdown() {","        $team_members = $this->Users_model->get_all_where(array(\"deleted\" => 0, \"user_type\" => \"staff\"), 0, 0, \"first_name\")->result();","","        $members_dropdown = array(array(\"id\" => \"\", \"text\" => \"- \" . lang(\"member\") . \" -\"));","        foreach ($team_members as $team_member) {","            $members_dropdown[] = array(\"id\" => $team_member->id, \"text\" => $team_member->first_name . \" \" . $team_member->last_name);","        }","","        return json_encode($members_dropdown);","    }","","    //load the expenses list yearly view","    function yearly() {","        $this->load->view(\"expenses/yearly_expenses\");","    }","","    //load custom expenses list","    function custom() {","        $this->load->view(\"expenses/custom_expenses\");","    }","","    //load the recurring view of expense list ","    function recurring() {","        $this->load->view(\"expenses/recurring_expenses_list\");","    }","","    //load the add/edit expense form","    function modal_form() {","        validate_submitted_data(array(","            \"id\" => \"numeric\"","        ));","","        $client_id = $this->input->post('client_id');","","        $model_info = $this->Expenses_model->get_one($this->input->post('id'));","        $view_data['categories_dropdown'] = $this->Expense_categories_model->get_dropdown_list(array(\"title\"));","","        $team_members = $this->Users_model->get_all_where(array(\"deleted\" => 0, \"user_type\" => \"staff\"))->result();","        $members_dropdown = array();","","        foreach ($team_members as $team_member) {","            $members_dropdown[$team_member->id] = $team_member->first_name . \" \" . $team_member->last_name;","        }","","        $view_data['members_dropdown'] = array(\"0\" => \"-\") + $members_dropdown;","        $view_data['clients_dropdown'] = array(\"\" => \"-\") + $this->Clients_model->get_dropdown_list(array(\"company_name\"), \"id\", array(\"is_lead\" => 0));","        $view_data['projects_dropdown'] = array(\"0\" => \"-\") + $this->Projects_model->get_dropdown_list(array(\"title\"));","        $view_data['taxes_dropdown'] = array(\"\" => \"-\") + $this->Taxes_model->get_dropdown_list(array(\"title\"));","","        $model_info->project_id = $model_info->project_id ? $model_info->project_id : $this->input->post('project_id');","        $model_info->user_id = $model_info->user_id ? $model_info->user_id : $this->input->post('user_id');","","        $view_data['model_info'] = $model_info;","        $view_data['client_id'] = $client_id;","","        $view_data['can_access_expenses'] = $this->can_access_expenses();","        $view_data['can_access_clients'] = $this->can_access_clients();","","        $view_data[\"custom_fields\"] = $this->Custom_fields_model->get_combined_details(\"expenses\", $view_data['model_info']->id, $this->login_user->is_admin, $this->login_user->user_type)->result();","        $this->load->view('expenses/modal_form', $view_data);","    }","","    //save an expense","    function save() {","        validate_submitted_data(array(","            \"id\" => \"numeric\",","            \"expense_date\" => \"required\",","            \"category_id\" => \"required\",","            \"amount\" => \"required\"","        ));","","        $id = $this->input->post('id');","","        $target_path = get_setting(\"timeline_file_path\");","        $files_data = move_files_from_temp_dir_to_permanent_dir($target_path, \"expense\");","        $new_files = unserialize($files_data);","","        $recurring = $this->input->post('recurring') ? 1 : 0;","        $expense_date = $this->input->post('expense_date');","        $repeat_every = $this->input->post('repeat_every');","        $repeat_type = $this->input->post('repeat_type');","        $no_of_cycles = $this->input->post('no_of_cycles');","","        $data = array(","            \"expense_date\" => $expense_date,","            \"title\" => $this->input->post('title'),","            \"description\" => $this->input->post('description'),","            \"category_id\" => $this->input->post('category_id'),","            \"amount\" => unformat_currency($this->input->post('amount')),","            \"client_id\" => $this->input->post('expense_client_id')? $this->input->post('expense_client_id'): 0,","            \"project_id\" => $this->input->post('expense_project_id'),","            \"user_id\" => $this->input->post('expense_user_id'),","            \"tax_id\" => $this->input->post('tax_id') ? $this->input->post('tax_id') : 0,","            \"tax_id2\" => $this->input->post('tax_id2') ? $this->input->post('tax_id2') : 0,","            \"recurring\" => $recurring,","            \"repeat_every\" => $repeat_every ? $repeat_every : 0,","            \"repeat_type\" => $repeat_type ? $repeat_type : NULL,","            \"no_of_cycles\" => $no_of_cycles ? $no_of_cycles : 0,","        );","","        $expense_info = $this->Expenses_model->get_one($id);","","        //is editing? update the files if required","        if ($id) {","            $timeline_file_path = get_setting(\"timeline_file_path\");","            $new_files = update_saved_files($timeline_file_path, $expense_info->files, $new_files);","        }","","        $data[\"files\"] = serialize($new_files);","","        if ($recurring) {","            //set next recurring date for recurring expenses","","            if ($id) {","                //update","                if ($this->input->post('next_recurring_date')) { //submitted any recurring date? set it.","                    $data['next_recurring_date'] = $this->input->post('next_recurring_date');","                } else {","                    //re-calculate the next recurring date, if any recurring fields has changed.","                    if ($expense_info->recurring != $data['recurring'] || $expense_info->repeat_every != $data['repeat_every'] || $expense_info->repeat_type != $data['repeat_type'] || $expense_info->expense_date != $data['expense_date']) {","                        $data['next_recurring_date'] = add_period_to_date($expense_date, $repeat_every, $repeat_type);","                    }","                }","            } else {","                //insert new","                $data['next_recurring_date'] = add_period_to_date($expense_date, $repeat_every, $repeat_type);","            }","","","            //recurring date must have to set a future date","            if (get_array_value($data, \"next_recurring_date\") && get_today_date() >= $data['next_recurring_date']) {","                echo json_encode(array(\"success\" => false, 'message' => lang('past_recurring_date_error_message_title'), 'next_recurring_date_error' => lang('past_recurring_date_error_message'), \"next_recurring_date_value\" => $data['next_recurring_date']));","                return false;","            }","        }","","        $save_id = $this->Expenses_model->save($data, $id);","        if ($save_id) {","            save_custom_fields(\"expenses\", $save_id, $this->login_user->is_admin, $this->login_user->user_type);","","            echo json_encode(array(\"success\" => true, \"data\" => $this->_row_data($save_id), 'id' => $save_id, 'message' => lang('record_saved')));","        } else {","            echo json_encode(array(\"success\" => false, 'message' => lang('error_occurred')));","        }","    }","","    //delete/undo an expense","    function delete() {","        validate_submitted_data(array(","            \"id\" => \"required|numeric\"","        ));","","        $id = $this->input->post('id');","        $expense_info = $this->Expenses_model->get_one($id);","","","        if ($this->Expenses_model->delete($id)) {","            //delete the files","            $file_path = get_setting(\"timeline_file_path\");","            if ($expense_info->files) {","                $files = unserialize($expense_info->files);","","                foreach ($files as $file) {","                    delete_app_files($file_path, array($file));","                }","            }","","            echo json_encode(array(\"success\" => true, 'message' => lang('record_deleted')));","        } else {","            echo json_encode(array(\"success\" => false, 'message' => lang('record_cannot_be_deleted')));","        }","    }","","    //get the expnese list data","    function list_data($recurring = false) {","        $start_date = $this->input->post('start_date');","        $end_date = $this->input->post('end_date');","        $category_id = $this->input->post('category_id');","        $project_id = $this->input->post('project_id');","        $user_id = $this->input->post('user_id');","","        $custom_fields = $this->Custom_fields_model->get_available_fields_for_table(\"expenses\", $this->login_user->is_admin, $this->login_user->user_type);","","        $options = array(\"start_date\" => $start_date, \"end_date\" => $end_date, \"category_id\" => $category_id, \"project_id\" => $project_id, \"user_id\" => $user_id, \"custom_fields\" => $custom_fields, \"recurring\" => $recurring);","        $list_data = $this->Expenses_model->get_details($options)->result();","","        $result = array();","        foreach ($list_data as $data) {","            $result[] = $this->_make_row($data, $custom_fields);","        }","        echo json_encode(array(\"data\" => $result));","    }","","    //get a row of expnese list","    private function _row_data($id) {","        $custom_fields = $this->Custom_fields_model->get_available_fields_for_table(\"expenses\", $this->login_user->is_admin, $this->login_user->user_type);","        $options = array(\"id\" => $id, \"custom_fields\" => $custom_fields);","        $data = $this->Expenses_model->get_details($options)->row();","        return $this->_make_row($data, $custom_fields);","    }","","    //prepare a row of expnese list","    private function _make_row($data, $custom_fields) {","","        $description = $data->description;","        if ($data->linked_client_name) {","            if ($description) {","                $description .= \"<br />\";","            }","            $description .= lang(\"client\") . \": \" . $data->linked_client_name;","        }","","        if ($data->project_title) {","            if ($description) {","                $description .= \"<br /> \";","            }","            $description .= lang(\"project\") . \": \" . $data->project_title;","        }","","        if ($data->linked_user_name) {","            if ($description) {","                $description .= \"<br /> \";","            }","            $description .= lang(\"team_member\") . \": \" . $data->linked_user_name;","        }","","        if ($data->recurring) {","            //show recurring information","            $recurring_stopped = false;","            $recurring_cycle_class = \"\";","            if ($data->no_of_cycles_completed > 0 && $data->no_of_cycles_completed == $data->no_of_cycles) {","                $recurring_cycle_class = \"text-danger\";","                $recurring_stopped = true;","            }","","            $cycles = $data->no_of_cycles_completed . \"/\" . $data->no_of_cycles;","            if (!$data->no_of_cycles) { //if not no of cycles, so it's infinity","                $cycles = $data->no_of_cycles_completed . \"/&#8734;\";","            }","","            if ($description) {","                $description .= \"<br /> \";","            }","","            $description .= lang(\"repeat_every\") . \": \" . $data->repeat_every . \" \" . lang(\"interval_\" . $data->repeat_type);","            $description .= \"<br /> \";","            $description .= \"<span class='$recurring_cycle_class'>\" . lang(\"cycles\") . \": \" . $cycles . \"</span>\";","","            if (!$recurring_stopped && (int) $data->next_recurring_date) {","                $description .= \"<br /> \";","                $description .= lang(\"next_recurring_date\") . \": \" . format_to_date($data->next_recurring_date, false);","            }","        }","","        if ($data->recurring_expense_id) {","            if ($description) {","                $description .= \"<br /> \";","            }","            $description .= modal_anchor(get_uri(\"expenses/expense_details\"), lang(\"original_expense\"), array(\"title\" => lang(\"expense_details\"), \"data-post-id\" => $data->recurring_expense_id));","        }","","        $files_link = \"\";","        if ($data->files) {","            $files = unserialize($data->files);","            if (count($files)) {","                foreach ($files as $key => $value) {","                    $file_name = get_array_value($value, \"file_name\");","                    $link = \" fa fa-\" . get_file_icon(strtolower(pathinfo($file_name, PATHINFO_EXTENSION)));","                    $files_link .= js_anchor(\" \", array('title' => \"\", \"data-toggle\" => \"app-modal\", \"data-sidebar\" => \"0\", \"class\" => \"pull-left font-22 mr10 $link\", \"title\" => remove_file_prefix($file_name), \"data-url\" => get_uri(\"expenses/file_preview/\" . $data->id . \"/\" . $key)));","                }","            }","        }","","        $tax = 0;","        $tax2 = 0;","        if ($data->tax_percentage) {","            $tax = $data->amount * ($data->tax_percentage / 100);","        }","        if ($data->tax_percentage2) {","            $tax2 = $data->amount * ($data->tax_percentage2 / 100);","        }","","        $row_data = array(","            $data->expense_date,","            modal_anchor(get_uri(\"expenses/expense_details\"), format_to_date($data->expense_date, false), array(\"title\" => lang(\"expense_details\"), \"data-post-id\" => $data->id)),","            $data->category_title,","            $data->title,","            $description,","            $files_link,","            to_currency($data->amount),","            to_currency($tax),","            to_currency($tax2),","            to_currency($data->amount + $tax + $tax2)","        );","","        foreach ($custom_fields as $field) {","            $cf_id = \"cfv_\" . $field->id;","            $row_data[] = $this->load->view(\"custom_fields/output_\" . $field->field_type, array(\"value\" => $data->$cf_id), true);","        }","","        $row_data[] = modal_anchor(get_uri(\"expenses/modal_form\"), \"<i class='fa fa-pencil'></i>\", array(\"class\" => \"edit\", \"title\" => lang('edit_expense'), \"data-post-id\" => $data->id))","                . js_anchor(\"<i class='fa fa-times fa-fw'></i>\", array('title' => lang('delete_expense'), \"class\" => \"delete\", \"data-id\" => $data->id, \"data-action-url\" => get_uri(\"expenses/delete\"), \"data-action\" => \"delete-confirmation\"));","","        return $row_data;","    }","","    function file_preview($id = \"\", $key = \"\") {","        if ($id) {","            $expense_info = $this->Expenses_model->get_one($id);","            $files = unserialize($expense_info->files);","            $file = get_array_value($files, $key);","","            $file_name = get_array_value($file, \"file_name\");","            $file_id = get_array_value($file, \"file_id\");","            $service_type = get_array_value($file, \"service_type\");","","            $view_data[\"file_url\"] = get_source_url_of_file($file, get_setting(\"timeline_file_path\"));","            $view_data[\"is_image_file\"] = is_image_file($file_name);","            $view_data[\"is_google_preview_available\"] = is_google_preview_available($file_name);","            $view_data[\"is_viewable_video_file\"] = is_viewable_video_file($file_name);","            $view_data[\"is_google_drive_file\"] = ($file_id && $service_type == \"google\") ? true : false;","","            $this->load->view(\"expenses/file_preview\", $view_data);","        } else {","            show_404();","        }","    }","","    /* upload a file */","","    function upload_file() {","        upload_file_to_temp();","    }","","    /* check valid file for ticket */","","    function validate_expense_file() {","        return validate_post_file($this->input->post(\"file_name\"));","    }","","    //load the expenses yearly chart view","    function yearly_chart() {","        $this->load->view(\"expenses/yearly_chart\");","    }","","    function yearly_chart_data() {","","        $months = array(\"january\", \"february\", \"march\", \"april\", \"may\", \"june\", \"july\", \"august\", \"september\", \"october\", \"november\", \"december\");","        $result = array();","","        $year = $this->input->post(\"year\");","        if ($year) {","            $expenses = $this->Expenses_model->get_yearly_expenses_chart($year);","            $values = array();","            foreach ($expenses as $value) {","                $values[$value->month - 1] = $value->total; //in array the month january(1) = index(0)","            }","","            foreach ($months as $key => $month) {","                $value = get_array_value($values, $key);","                $result[] = array(lang(\"short_\" . $month), $value ? $value : 0);","            }","","            echo json_encode(array(\"data\" => $result));","        }","    }","","    function income_vs_expenses() {","        $view_data[\"projects_dropdown\"] = $this->_get_projects_dropdown_for_income_and_epxenses();","        $this->template->rander(\"expenses/income_vs_expenses_chart\", $view_data);","    }","","    function income_vs_expenses_chart_data() {","","        $year = $this->input->post(\"year\");","        $project_id = $this->input->post(\"project_id\");","","        if ($year) {","            $expenses_data = $this->Expenses_model->get_yearly_expenses_chart($year, $project_id);","            $payments_data = $this->Invoice_payments_model->get_yearly_payments_chart($year, \"\", $project_id);","","            $payments = array();","            $payments_array = array();","","            $expenses = array();","            $expenses_array = array();","","            for ($i = 1; $i <= 12; $i++) {","                $payments[$i] = 0;","                $expenses[$i] = 0;","            }","","            foreach ($payments_data as $payment) {","                $payments[$payment->month] = $payment->total;","            }","            foreach ($expenses_data as $expense) {","                $expenses[$expense->month] = $expense->total;","            }","","            foreach ($payments as $key => $payment) {","                $payments_array[] = array($key, $payment);","            }","","            foreach ($expenses as $key => $expense) {","                $expenses_array[] = array($key, $expense);","            }","","            echo json_encode(array(\"income\" => $payments_array, \"expenses\" => $expenses_array));","        }","    }","","    function income_vs_expenses_summary() {","        $view_data[\"projects_dropdown\"] = $this->_get_projects_dropdown_for_income_and_epxenses();","        $this->load->view(\"expenses/income_vs_expenses_summary\", $view_data);","    }","","    function income_vs_expenses_summary_list_data() {","","        $year = explode(\"-\", $this->input->post(\"start_date\"));","        $project_id = $this->input->post(\"project_id\");","","        if ($year) {","            $expenses_data = $this->Expenses_model->get_yearly_expenses_chart($year[0], $project_id);","            $payments_data = $this->Invoice_payments_model->get_yearly_payments_chart($year[0], \"\", $project_id);","","            $payments = array();","            $expenses = array();","","            for ($i = 1; $i <= 12; $i++) {","                $payments[$i] = 0;","                $expenses[$i] = 0;","            }","","            foreach ($payments_data as $payment) {","                $payments[$payment->month] = $payment->total;","            }","            foreach ($expenses_data as $expense) {","                $expenses[$expense->month] = $expense->total;","            }","","            //get the list of summary","            $result = array();","            for ($i = 1; $i <= 12; $i++) {","                $result[] = $this->_row_data_of_summary($i, $payments[$i], $expenses[$i]);","            }","","            echo json_encode(array(\"data\" => $result));","        }","    }","","    //get the row of summary","    private function _row_data_of_summary($month_index, $payments, $expenses) {","        //get the month name","        $month_array = array(\" \", \"january\", \"february\", \"march\", \"april\", \"may\", \"june\", \"july\", \"august\", \"september\", \"october\", \"november\", \"december\");","","        $month = get_array_value($month_array, $month_index);","","        $month_name = lang($month);","        $profit = $payments - $expenses;","","        return array(","            $month_index,","            $month_name,","            to_currency($payments),","            to_currency($expenses),","            to_currency($profit)","        );","    }","","    /* list of expense of a specific client, prepared for datatable  */","","    function expense_list_data_of_client($client_id) {","        $this->access_only_team_members();","","        $custom_fields = $this->Custom_fields_model->get_available_fields_for_table(\"expenses\", $this->login_user->is_admin, $this->login_user->user_type);","","        $options = array(\"client_id\" => $client_id);","","        $list_data = $this->Expenses_model->get_details($options)->result();","        $result = array();","        foreach ($list_data as $data) {","            $result[] = $this->_make_row($data, $custom_fields);","        }","        echo json_encode(array(\"data\" => $result));","    }","","    private function can_access_clients() {","        $permissions = $this->login_user->permissions;","","        if (get_array_value($permissions, \"client\")) {","            return true;","        } else {","            return false;","        }","    }","","    function expense_details() {","        validate_submitted_data(array(","            \"id\" => \"required|numeric\"","        ));","","        $expense_id = $this->input->post('id');","        $options = array(\"id\" => $expense_id);","        $info = $this->Expenses_model->get_details($options)->row();","        if (!$info) {","            show_404();","        }","","        $view_data[\"expense_info\"] = $info;","        $view_data['custom_fields_list'] = $this->Custom_fields_model->get_combined_details(\"expenses\", $expense_id, $this->login_user->is_admin, $this->login_user->user_type)->result();","","        $this->load->view(\"expenses/expense_details\", $view_data);","    }","","}","","/* End of file expenses.php */","/* Location: ./application/controllers/expenses.php */"],"id":3},{"start":{"row":0,"column":0},"end":{"row":80,"column":0},"action":"insert","lines":["<div id=\"page-content\" class=\"clearfix p20\">","    <div class=\"panel clearfix\">","        <ul id=\"expenses-tabs\" data-toggle=\"ajax-tab\" class=\"nav nav-tabs bg-white title\" role=\"tablist\">","            <li class=\"title-tab\"><h4 class=\"pl15 pt10 pr15\"><?php echo lang(\"expenses\"); ?></h4></li>","            <li><a id=\"monthly-expenses-button\"  role=\"presentation\" class=\"active\" href=\"javascript:;\" data-target=\"#monthly-expenses\"><?php echo lang(\"monthly\"); ?></a></li>","            <li><a role=\"presentation\" href=\"<?php echo_uri(\"expenses/yearly/\"); ?>\" data-target=\"#yearly-expenses\"><?php echo lang('yearly'); ?></a></li>","            <li><a role=\"presentation\" href=\"<?php echo_uri(\"expenses/custom/\"); ?>\" data-target=\"#custom-expenses\"><?php echo lang('custom'); ?></a></li>","            <li><a role=\"presentation\" href=\"<?php echo_uri(\"expenses/recurring/\"); ?>\" data-target=\"#recurring-expenses\"><?php echo lang('recurring'); ?></a></li>","            <li><a role=\"presentation\" href=\"<?php echo_uri(\"expenses/yearly_chart/\"); ?>\" data-target=\"#yearly-chart\"><?php echo lang('chart'); ?></a></li>","            <div class=\"tab-title clearfix no-border\">","                <div class=\"title-button-group\">","                    <?php echo modal_anchor(get_uri(\"expenses/modal_form\"), \"<i class='fa fa-plus-circle'></i> \" . lang('add_expense'), array(\"class\" => \"btn btn-default mb0\", \"title\" => lang('add_expense'))); ?>","                </div>","            </div>","        </ul>","","        <div class=\"tab-content\">","            <div role=\"tabpanel\" class=\"tab-pane fade\" id=\"monthly-expenses\">","                <div class=\"table-responsive\">","                    <table id=\"monthly-expense-table\" class=\"display\" cellspacing=\"0\" width=\"100%\">","                    </table>","                </div>","            </div>","            <div role=\"tabpanel\" class=\"tab-pane fade\" id=\"yearly-expenses\"></div>","            <div role=\"tabpanel\" class=\"tab-pane fade\" id=\"custom-expenses\"></div>","            <div role=\"tabpanel\" class=\"tab-pane fade\" id=\"recurring-expenses\"></div>","            <div role=\"tabpanel\" class=\"tab-pane fade\" id=\"yearly-chart\"></div>","        </div>","    </div>","</div>","","<script type=\"text/javascript\">","    loadExpensesTable = function (selector, dateRange) {","        var customDatePicker = \"\", recurring = \"0\";","        if (dateRange === \"custom\" || dateRange === \"recurring\") {","            customDatePicker = [{startDate: {name: \"start_date\", value: moment().format(\"YYYY-MM-DD\")}, endDate: {name: \"end_date\", value: moment().format(\"YYYY-MM-DD\")}, showClearButton: true}];","            ","            if(dateRange === \"recurring\"){","                recurring = \"1\";","            }","            ","            dateRange = \"\";","        }        ","","        $(selector).appTable({","            source: '<?php echo_uri(\"expenses/list_data\") ?>/' + recurring,","            dateRangeType: dateRange,","            filterDropdown: [","                {name: \"category_id\", class: \"w200\", options: <?php echo $categories_dropdown; ?>},","                {name: \"user_id\", class: \"w200\", options: <?php echo $members_dropdown; ?>},","                <?php if ($projects_dropdown) { ?>","                    {name: \"project_id\", class: \"w200\", options: <?php echo $projects_dropdown; ?>}","                <?php } ?>","            ],","            order: [[0, \"asc\"]],","            rangeDatepicker: customDatePicker,","            columns: [","                {visible: false, searchable: false},","                {title: '<?php echo lang(\"date\") ?>', \"iDataSort\": 0},","                {title: '<?php echo lang(\"category\") ?>'},","                {title: '<?php echo lang(\"title\") ?>'},","                {title: '<?php echo lang(\"description\") ?>'},","                {title: '<?php echo lang(\"files\") ?>'},","                {title: '<?php echo lang(\"amount\") ?>', \"class\": \"text-right\"},","                {title: '<?php echo lang(\"tax\") ?>', \"class\": \"text-right\"},","                {title: '<?php echo lang(\"second_tax\") ?>', \"class\": \"text-right\"},","                {title: '<?php echo lang(\"total\") ?>', \"class\": \"text-right\"}","<?php echo $custom_field_headers; ?>,","                {title: '<i class=\"fa fa-bars\"></i>', \"class\": \"text-center option w100\"}","            ],","            printColumns: [1, 2, 3, 4, 6, 7, 8, 9],","            xlsColumns: [1, 2, 3, 4, 6, 7, 8, 9],","            summation: [{column: 6, dataType: 'currency'}, {column: 7, dataType: 'currency'}, {column: 8, dataType: 'currency'}, {column: 9, dataType: 'currency'}]","        });","    };","","    $(document).ready(function () {","        loadExpensesTable(\"#monthly-expense-table\", \"monthly\");","    });","</script>",""]}],[{"start":{"row":65,"column":0},"end":{"row":66,"column":0},"action":"remove","lines":["                {title: '<?php echo lang(\"second_tax\") ?>', \"class\": \"text-right\"},",""],"id":4}],[{"start":{"row":60,"column":55},"end":{"row":61,"column":0},"action":"insert","lines":["",""],"id":5},{"start":{"row":61,"column":0},"end":{"row":61,"column":16},"action":"insert","lines":["                "]}],[{"start":{"row":61,"column":12},"end":{"row":61,"column":16},"action":"remove","lines":["    "],"id":6},{"start":{"row":61,"column":8},"end":{"row":61,"column":12},"action":"remove","lines":["    "]},{"start":{"row":61,"column":4},"end":{"row":61,"column":8},"action":"remove","lines":["    "]},{"start":{"row":61,"column":0},"end":{"row":61,"column":4},"action":"remove","lines":["    "]}],[{"start":{"row":61,"column":0},"end":{"row":62,"column":0},"action":"insert","lines":["                {title: '<?php echo lang(\"title\") ?>'},",""],"id":7}],[{"start":{"row":61,"column":55},"end":{"row":62,"column":0},"action":"remove","lines":["",""],"id":8}],[{"start":{"row":60,"column":42},"end":{"row":60,"column":47},"action":"remove","lines":["title"],"id":9},{"start":{"row":60,"column":42},"end":{"row":60,"column":43},"action":"insert","lines":["l"]},{"start":{"row":60,"column":43},"end":{"row":60,"column":44},"action":"insert","lines":["o"]},{"start":{"row":60,"column":44},"end":{"row":60,"column":45},"action":"insert","lines":["c"]},{"start":{"row":60,"column":45},"end":{"row":60,"column":46},"action":"insert","lines":["a"]},{"start":{"row":60,"column":46},"end":{"row":60,"column":47},"action":"insert","lines":["t"]},{"start":{"row":60,"column":47},"end":{"row":60,"column":48},"action":"insert","lines":["i"]},{"start":{"row":60,"column":48},"end":{"row":60,"column":49},"action":"insert","lines":["o"]},{"start":{"row":60,"column":49},"end":{"row":60,"column":50},"action":"insert","lines":["n"]}],[{"start":{"row":48,"column":99},"end":{"row":49,"column":0},"action":"insert","lines":["",""],"id":10},{"start":{"row":49,"column":0},"end":{"row":49,"column":16},"action":"insert","lines":["                "]}],[{"start":{"row":49,"column":12},"end":{"row":49,"column":16},"action":"remove","lines":["    "],"id":11},{"start":{"row":49,"column":8},"end":{"row":49,"column":12},"action":"remove","lines":["    "]},{"start":{"row":49,"column":4},"end":{"row":49,"column":8},"action":"remove","lines":["    "]},{"start":{"row":49,"column":0},"end":{"row":49,"column":4},"action":"remove","lines":["    "]},{"start":{"row":48,"column":99},"end":{"row":49,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":48,"column":99},"end":{"row":49,"column":0},"action":"insert","lines":["",""],"id":12},{"start":{"row":49,"column":0},"end":{"row":49,"column":16},"action":"insert","lines":["                "]}],[{"start":{"row":49,"column":12},"end":{"row":49,"column":16},"action":"remove","lines":["    "],"id":13},{"start":{"row":49,"column":8},"end":{"row":49,"column":12},"action":"remove","lines":["    "]},{"start":{"row":49,"column":4},"end":{"row":49,"column":8},"action":"remove","lines":["    "]},{"start":{"row":49,"column":0},"end":{"row":49,"column":4},"action":"remove","lines":["    "]},{"start":{"row":48,"column":99},"end":{"row":49,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":48,"column":99},"end":{"row":49,"column":0},"action":"insert","lines":["",""],"id":14},{"start":{"row":49,"column":0},"end":{"row":49,"column":16},"action":"insert","lines":["                "]}],[{"start":{"row":49,"column":12},"end":{"row":49,"column":16},"action":"remove","lines":["    "],"id":15},{"start":{"row":49,"column":8},"end":{"row":49,"column":12},"action":"remove","lines":["    "]},{"start":{"row":49,"column":4},"end":{"row":49,"column":8},"action":"remove","lines":["    "]},{"start":{"row":49,"column":0},"end":{"row":49,"column":4},"action":"remove","lines":["    "]}],[{"start":{"row":49,"column":0},"end":{"row":50,"column":0},"action":"insert","lines":["                {name: \"category_id\", class: \"w200\", options: <?php echo $categories_dropdown; ?>},",""],"id":16}],[{"start":{"row":49,"column":99},"end":{"row":50,"column":0},"action":"remove","lines":["",""],"id":17}],[{"start":{"row":49,"column":24},"end":{"row":49,"column":35},"action":"remove","lines":["category_id"],"id":18},{"start":{"row":49,"column":24},"end":{"row":49,"column":25},"action":"insert","lines":["l"]},{"start":{"row":49,"column":25},"end":{"row":49,"column":26},"action":"insert","lines":["c"]},{"start":{"row":49,"column":26},"end":{"row":49,"column":27},"action":"insert","lines":["o"]},{"start":{"row":49,"column":27},"end":{"row":49,"column":28},"action":"insert","lines":["a"]},{"start":{"row":49,"column":28},"end":{"row":49,"column":29},"action":"insert","lines":["t"]},{"start":{"row":49,"column":29},"end":{"row":49,"column":30},"action":"insert","lines":["i"]}],[{"start":{"row":49,"column":29},"end":{"row":49,"column":30},"action":"remove","lines":["i"],"id":19},{"start":{"row":49,"column":28},"end":{"row":49,"column":29},"action":"remove","lines":["t"]},{"start":{"row":49,"column":27},"end":{"row":49,"column":28},"action":"remove","lines":["a"]},{"start":{"row":49,"column":26},"end":{"row":49,"column":27},"action":"remove","lines":["o"]},{"start":{"row":49,"column":25},"end":{"row":49,"column":26},"action":"remove","lines":["c"]}],[{"start":{"row":49,"column":25},"end":{"row":49,"column":26},"action":"insert","lines":["o"],"id":20},{"start":{"row":49,"column":26},"end":{"row":49,"column":27},"action":"insert","lines":["c"]},{"start":{"row":49,"column":27},"end":{"row":49,"column":28},"action":"insert","lines":["a"]},{"start":{"row":49,"column":28},"end":{"row":49,"column":29},"action":"insert","lines":["t"]}],[{"start":{"row":49,"column":24},"end":{"row":49,"column":29},"action":"remove","lines":["locat"],"id":21},{"start":{"row":49,"column":24},"end":{"row":49,"column":35},"action":"insert","lines":["location_id"]}],[{"start":{"row":49,"column":74},"end":{"row":49,"column":93},"action":"remove","lines":["categories_dropdown"],"id":22},{"start":{"row":49,"column":74},"end":{"row":49,"column":75},"action":"insert","lines":["l"]},{"start":{"row":49,"column":75},"end":{"row":49,"column":76},"action":"insert","lines":["o"]},{"start":{"row":49,"column":76},"end":{"row":49,"column":77},"action":"insert","lines":["c"]},{"start":{"row":49,"column":77},"end":{"row":49,"column":78},"action":"insert","lines":["a"]},{"start":{"row":49,"column":78},"end":{"row":49,"column":79},"action":"insert","lines":["t"]},{"start":{"row":49,"column":79},"end":{"row":49,"column":80},"action":"insert","lines":["i"]},{"start":{"row":49,"column":80},"end":{"row":49,"column":81},"action":"insert","lines":["o"]},{"start":{"row":49,"column":81},"end":{"row":49,"column":82},"action":"insert","lines":["n"]}],[{"start":{"row":49,"column":82},"end":{"row":49,"column":83},"action":"insert","lines":["_"],"id":23},{"start":{"row":49,"column":83},"end":{"row":49,"column":84},"action":"insert","lines":["d"]},{"start":{"row":49,"column":84},"end":{"row":49,"column":85},"action":"insert","lines":["r"]},{"start":{"row":49,"column":85},"end":{"row":49,"column":86},"action":"insert","lines":["o"]},{"start":{"row":49,"column":86},"end":{"row":49,"column":87},"action":"insert","lines":["p"]},{"start":{"row":49,"column":87},"end":{"row":49,"column":88},"action":"insert","lines":["d"]},{"start":{"row":49,"column":88},"end":{"row":49,"column":89},"action":"insert","lines":["o"]},{"start":{"row":49,"column":89},"end":{"row":49,"column":90},"action":"insert","lines":["w"]},{"start":{"row":49,"column":90},"end":{"row":49,"column":91},"action":"insert","lines":["n"]}],[{"start":{"row":29,"column":6},"end":{"row":30,"column":0},"action":"insert","lines":["",""],"id":24},{"start":{"row":30,"column":0},"end":{"row":31,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":31,"column":0},"end":{"row":31,"column":39},"action":"insert","lines":["<?php echo_uri(\"expenses/list_data\") ?>"],"id":25}],[{"start":{"row":31,"column":10},"end":{"row":31,"column":36},"action":"remove","lines":["_uri(\"expenses/list_data\")"],"id":26}],[{"start":{"row":31,"column":10},"end":{"row":31,"column":11},"action":"insert","lines":[" "],"id":27},{"start":{"row":31,"column":11},"end":{"row":31,"column":12},"action":"insert","lines":["$"]},{"start":{"row":31,"column":12},"end":{"row":31,"column":13},"action":"insert","lines":["l"]},{"start":{"row":31,"column":13},"end":{"row":31,"column":14},"action":"insert","lines":["o"]},{"start":{"row":31,"column":14},"end":{"row":31,"column":15},"action":"insert","lines":["c"]},{"start":{"row":31,"column":15},"end":{"row":31,"column":16},"action":"insert","lines":["a"]},{"start":{"row":31,"column":16},"end":{"row":31,"column":17},"action":"insert","lines":["t"]}],[{"start":{"row":31,"column":11},"end":{"row":31,"column":17},"action":"remove","lines":["$locat"],"id":28},{"start":{"row":31,"column":11},"end":{"row":31,"column":29},"action":"insert","lines":["$location_dropdown"]}],[{"start":{"row":31,"column":32},"end":{"row":31,"column":33},"action":"insert","lines":[";"],"id":29}],[{"start":{"row":31,"column":32},"end":{"row":31,"column":33},"action":"remove","lines":[";"],"id":30}],[{"start":{"row":31,"column":29},"end":{"row":31,"column":30},"action":"insert","lines":[";"],"id":31}],[{"start":{"row":31,"column":0},"end":{"row":31,"column":33},"action":"remove","lines":["<?php echo $location_dropdown; ?>"],"id":32}],[{"start":{"row":30,"column":0},"end":{"row":31,"column":0},"action":"remove","lines":["",""],"id":33}],[{"start":{"row":16,"column":33},"end":{"row":17,"column":12},"action":"insert","lines":["","            "],"id":34}],[{"start":{"row":17,"column":12},"end":{"row":17,"column":45},"action":"insert","lines":["<?php echo $location_dropdown; ?>"],"id":35}],[{"start":{"row":17,"column":0},"end":{"row":18,"column":0},"action":"remove","lines":["            <?php echo $location_dropdown; ?>",""],"id":36}]]},"ace":{"folds":[],"scrolltop":420,"scrollleft":0,"selection":{"start":{"row":37,"column":12},"end":{"row":37,"column":12},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":24,"state":"start","mode":"ace/mode/php"}},"timestamp":1616648836982,"hash":"3870f2184a3d88f0558643e24a22a64b1899cdb4"}